<?php
/**
 * EdgeDeviceSettingsDataSubinterfaces
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Velocloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EdgeDeviceSettingsDataSubinterfaces Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeDeviceSettingsDataSubinterfaces implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'edgeDeviceSettingsData_subinterfaces';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subinterface_id' => 'int',
        'subinterface_type' => 'string',
        'addressing' => '\Swagger\Client\Model\EdgeDeviceSettingsDataAddressing',
        'override' => 'bool',
        'disabled' => 'bool',
        'nat_direct' => 'bool',
        'vlan_id' => 'int',
        'ospf' => '\Swagger\Client\Model\EdgeDeviceSettingsDataOspf'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subinterface_id' => null,
        'subinterface_type' => null,
        'addressing' => null,
        'override' => null,
        'disabled' => null,
        'nat_direct' => null,
        'vlan_id' => null,
        'ospf' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subinterface_id' => 'subinterfaceId',
        'subinterface_type' => 'subinterfaceType',
        'addressing' => 'addressing',
        'override' => 'override',
        'disabled' => 'disabled',
        'nat_direct' => 'natDirect',
        'vlan_id' => 'vlanId',
        'ospf' => 'ospf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subinterface_id' => 'setSubinterfaceId',
        'subinterface_type' => 'setSubinterfaceType',
        'addressing' => 'setAddressing',
        'override' => 'setOverride',
        'disabled' => 'setDisabled',
        'nat_direct' => 'setNatDirect',
        'vlan_id' => 'setVlanId',
        'ospf' => 'setOspf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subinterface_id' => 'getSubinterfaceId',
        'subinterface_type' => 'getSubinterfaceType',
        'addressing' => 'getAddressing',
        'override' => 'getOverride',
        'disabled' => 'getDisabled',
        'nat_direct' => 'getNatDirect',
        'vlan_id' => 'getVlanId',
        'ospf' => 'getOspf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subinterface_id'] = isset($data['subinterface_id']) ? $data['subinterface_id'] : null;
        $this->container['subinterface_type'] = isset($data['subinterface_type']) ? $data['subinterface_type'] : null;
        $this->container['addressing'] = isset($data['addressing']) ? $data['addressing'] : null;
        $this->container['override'] = isset($data['override']) ? $data['override'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['nat_direct'] = isset($data['nat_direct']) ? $data['nat_direct'] : null;
        $this->container['vlan_id'] = isset($data['vlan_id']) ? $data['vlan_id'] : null;
        $this->container['ospf'] = isset($data['ospf']) ? $data['ospf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets subinterface_id
     *
     * @return int
     */
    public function getSubinterfaceId()
    {
        return $this->container['subinterface_id'];
    }

    /**
     * Sets subinterface_id
     *
     * @param int $subinterface_id subinterface_id
     *
     * @return $this
     */
    public function setSubinterfaceId($subinterface_id)
    {
        $this->container['subinterface_id'] = $subinterface_id;

        return $this;
    }

    /**
     * Gets subinterface_type
     *
     * @return string
     */
    public function getSubinterfaceType()
    {
        return $this->container['subinterface_type'];
    }

    /**
     * Sets subinterface_type
     *
     * @param string $subinterface_type subinterface_type
     *
     * @return $this
     */
    public function setSubinterfaceType($subinterface_type)
    {
        $this->container['subinterface_type'] = $subinterface_type;

        return $this;
    }

    /**
     * Gets addressing
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataAddressing
     */
    public function getAddressing()
    {
        return $this->container['addressing'];
    }

    /**
     * Sets addressing
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataAddressing $addressing addressing
     *
     * @return $this
     */
    public function setAddressing($addressing)
    {
        $this->container['addressing'] = $addressing;

        return $this;
    }

    /**
     * Gets override
     *
     * @return bool
     */
    public function getOverride()
    {
        return $this->container['override'];
    }

    /**
     * Sets override
     *
     * @param bool $override override
     *
     * @return $this
     */
    public function setOverride($override)
    {
        $this->container['override'] = $override;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets nat_direct
     *
     * @return bool
     */
    public function getNatDirect()
    {
        return $this->container['nat_direct'];
    }

    /**
     * Sets nat_direct
     *
     * @param bool $nat_direct nat_direct
     *
     * @return $this
     */
    public function setNatDirect($nat_direct)
    {
        $this->container['nat_direct'] = $nat_direct;

        return $this;
    }

    /**
     * Gets vlan_id
     *
     * @return int
     */
    public function getVlanId()
    {
        return $this->container['vlan_id'];
    }

    /**
     * Sets vlan_id
     *
     * @param int $vlan_id static only
     *
     * @return $this
     */
    public function setVlanId($vlan_id)
    {
        $this->container['vlan_id'] = $vlan_id;

        return $this;
    }

    /**
     * Gets ospf
     *
     * @return \Swagger\Client\Model\EdgeDeviceSettingsDataOspf
     */
    public function getOspf()
    {
        return $this->container['ospf'];
    }

    /**
     * Sets ospf
     *
     * @param \Swagger\Client\Model\EdgeDeviceSettingsDataOspf $ospf ospf
     *
     * @return $this
     */
    public function setOspf($ospf)
    {
        $this->container['ospf'] = $ospf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


